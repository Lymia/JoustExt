// Skip to the first possible enemy flag cell

>->(-)*9>+>>>>>

// The actual poke loop
$decoy_check_size = 10
$reverse_offset = 0
$suppress_antidefense = 0
$patience = 2000
$check_count = 2

@final_loop() {
    (-.)*140 (-.+-++.)*-1
}

@clear_loop() {
    // Nyuroki based core clear loop.
    (
        if ($reverse_offset == 1) {
            -
        } else {
            +
        }
    )*$decoy_check_size
    callcc(@break) {
        (([
            - raw "{}"
            if ($suppress_antidefense == 0) {
                [-++--.]
            }
            @break()
        ])*$patience)*$check_count
    }
}

@flag_assassin() {
    local {
        $decoy_check_size = 100 - $decoy_check_size
        $reverse_offset = 1
        $patience = 300
        $suppress_antidefense = 1
        $check_count = 1
        @clear_loop()
    }

    // Okay, flag was not assassinated. Plan B.
    callcc(@break) {
        [
            $decoy_check_size = 0
            $patience = 1500 // low patience because we already tried a fair bit
            $check_count = 1 // we already observed zero once
            @clear_loop()
            @break()
        ]
    }
}

@lots_of_small_decoys() {
    $rtl = $ret_home + 1
    @continue_loop() {
        if ($rtl == 30) {
            @final_loop()
        } else {
            >
            $rtl = $rtl + 1

            (+)*$decoy_check_size
            ([
                -

                raw "{"

                // We failed to clear the cell!
                reset {
                    @flag_assassin()
                    (> @clear_loop())*(30-$rtl)
                }

                raw "}"

                // Oh hey, we did clear it!
                @continue_loop()
            ])*($decoy_check_size * 2)
        }
    }

    @continue_loop()
}

@found_large_cell() {
    // Either this is a large decoy being built currently or the flag on a decoyless bot.

    reset {
        @flag_assassin()
        $decoy_check_size = 20
        (@clear_loop() >)*(30-$tl-1)
    }
}

@go_home_and_repair() {
    @ohshit() {
        // PANIK
        reset {
          $decoy_check_size = 2
          (> @clear_loop())*(30-$tl)
        }
    }

    // Go home, make sure we aren't fucked
    (<)*($ret_home-3)
    -[
        <<
        +   [
            (>)*($ret_home-3)
            @ohshit()
        ]
        (-)*35
        >>
        (>)*($ret_home-3)
        @main_behavior()
    ]
    (+)*9
    <
    (-)*20
    >
    (>)*($ret_home-3)
    @main_behavior()
}

@found_decoy_or_tripwire() {
    @main_behavior() {
        // We check AGAIN if we've got a big decoy or a small decoy.
        >
        $ret_home = $ret_home + 1

        (+)*$decoy_check_size
        ([
            -

            raw "{"

            // We failed to clear the cell!
            @found_large_cell()

            raw "}"

            // Oh hey, we did clear it!
            @lots_of_small_decoys()
        ])*($decoy_check_size * 2)
    }

    // This is a small decoy or a tripwire
    +

    // Go home, make sure we aren't fucked
    @go_home_and_repair()
}

@poke_loop($tl) {
    $ret_home = $tl - 1

    // Determine if we've found a flag or a decoy
    (-)*$decoy_check_size
    ([
        +

        raw "{"

        // We failed to clear the cell!
        local {
            @main_behavior() { @found_large_cell() }
            @go_home_and_repair()
        }

        raw "}"

        // Oh hey, we did clear it!
        @found_decoy_or_tripwire()
    ])*($decoy_check_size * 2)
}

for ($tl in 10 to 29) {
    > [ @poke_loop($tl) ]
}

// Must be the flag, I guess
> @final_loop()
